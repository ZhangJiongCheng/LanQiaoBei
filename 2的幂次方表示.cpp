///*
//任何一个正整数都可以用2的幂次方表示，例如137 = 2^7 + 2^3 + 2^0，
//同时，约定方次用括号来表示，即a^b可表示为a(b)，
//由此可知，137可表示为2(7)+2(3)+2(0),
//进一步:7 = 2^2 + 2 + 2^0 (2^1用2表示）
//       3 = 2 + 2^0
//所以最后137表示为2(2(2)+2+2(0))+2(2+2(0))+2(0)
//
//又如：
//1315 = 210 + 28 + 25 + 2 + 1
//所以1315最后表示为：
//2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)
//
//输入：
//一个正整数n
//
//输出：
//一行，符合约定的n的0,2表示（在表示中不能有空格）
//
//输入示例：
//137
//
//输出示例：
//2(2(2)+2+2(0))+2(2+2(0))+2(0)
//*/
//
//#include<iostream>
//using namespace std;
//
//long n;
//
//void f(long n, long bit)
//{
//	/*
//	  想象在计算机中，n被表示成二进制是怎么样的，如：5的二进制位101
//	*/
//	if (n == 0) return;   
//	long r = n % 2;   //标记当前为是1还是0，为0的为是不用处理的
//	n /= 2;      //n整体右移1位
//	f(n, bit + 1);  //递归处理，因为最后输出是先输出大的为的
//	if (n != 0 && r != 0) cout << "+";  
//	//n!=0表示除最低为外，前面还有非0位，即前面会有输出
//	//r!=0表示当前为不为0，即当前位有输出
//	//前后都有输出才需要加号
//	if (r != 0)
//		if (bit == 0) cout << "2(0)";
//		else if (bit == 1) cout << "2";
//		else if (bit == 2) cout << "2(2)";
//		else   
//		{
//			cout << "2(";
//			f(bit, 0);
//			cout << ")";
//		}
//}
//
//int main()
//{
//	cin >> n;
//	f(n, 0);
//	return 0;
//}