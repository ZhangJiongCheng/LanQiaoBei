///*
//一个商人通过一个n×n的正方形的网格去参加一个非常重要的商务活动，
//他要从网格的左上角进，右下角出，每穿越中间一个小方格都要花费一个单位时间，
//商人必须在2n- 1个单位时间穿越出去，而在经过中间的每个小方格时都需要缴纳一定的费用。
//这个商人期望在规定时间内用最少费用穿越出去，请问至少需要多少费用？
//注意：只能向上下左右四个方向移动，且不能离开网格
//
//输入：
//第一行是一个整数，表示正方形的宽度n
//后面n行，每行n个不大于100的整数为网格上每个小方格的费用
//
//输出：
//至少需要的费用
//
//输入示例：
//5
//1  4  6  8  10
//2  5  7  15 17
//6  8  9  18 20
//10 11 12 19 21
//20 23 25 29 33
//
//输出示例：
//109
//*/
//
//#include<iostream>
//using namespace std;
//
//long n;
//long a[101][101];
//long dp[101][101]; //dp[i][j]表示从起始点走到第i行第j列所花费的最少费用
//
//int main()
//{
//	cin >> n;
//	for (long i = 1; i <= n; ++i)
//		for (long j = 1; j <= n; ++j)
//			cin >> a[i][j];
//
//	dp[1][1] = a[1][1];
//	for (long i = 2; i <= n; ++i)
//		dp[i][1] = dp[i - 1][1] + a[i][1];
//	for (long j = 2; j <= n; ++j)
//		dp[1][j] = dp[1][j - 1] + a[1][j];
//
//	for (long i = 2; i <= n; ++i)
//		for (long j = 2; j <= n; ++j)
//			dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + a[i][j];
//
//	cout << dp[n][n] << endl;
//
//	return 0;
//}