///*
//【问题描述】
//
//小明最近对数列特别感兴趣，尤其想研究一个数列中有多少个长度为 k 的递增子序列。
//
//一个序列<a1,a2,...an>的子序列定义为<a[i1],a[i2],...a[il]>，其中1<=i1<=il<=n。 
//如果a[i j-1]<a[ij],且所有1<j<=l,则子序列<a[i1],a[i2],...a[il]>为递增子序列。
//
//小明想请你帮忙计算数列中长度为m的递增子序列个数。
//
//【输入形式】
//输入包含1组测试用例。
//每组测试用例中第一行包含两个数字n和m，其中n为数列长度，m为要计算的递增子序列长度。
//接下来一行包括n个不同的整数ai，其中ai是数列中的第i个数字。
//
//【输出形式】
//对于每组测试用例，输出一行输入序列包含的长度 k 为的递增子序列的数目。
//
//【样例输入】
//10 5
//1 2 3 4 5 6 7 8 9 10
//
//【样例输出】
//252
//*/
//
//#include <iostream>
//using namespace std;
//
//const int N = 110;
//
//int n, m;
//int a[N];
//int f[N][N];  //f[i][j]表示以i结尾的长度为j的递增子序列的个数
//
//int main()
//{
//    cin >> n >> m;
//    for (int i = 1; i <= n; ++i)
//    {
//        cin >> a[i];
//        f[i][1] = 1;
//    }
//
//    for(int i = 1; i <= n; ++i)   //枚举序列的长度
//    {
//        for (int j = 1; j <= m; ++j)  //枚举子序列的长度
//        {
//            for (int k = 1; k < i; ++k)  //枚举跳跃点
//            {
//                if (a[i] > a[k])
//                    f[i][j] += f[k][j - 1];
//            }
//        }
//    }
//
//    int ans = 0;
//    for (int i = 1; i <= n; ++i)
//        ans += f[i][m];
//    cout << ans << endl;
//
//    return 0;
//}